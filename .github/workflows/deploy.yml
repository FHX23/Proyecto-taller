name: Despliegue en Servidor de Producción

on:
  push:
    branches:
      - main # Se ejecuta en cada push a la rama main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Instalar dependencias (OpenVPN, SSH y sshpass)
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-client sshpass openvpn openvpn-systemd-resolved
          
      - name: Crear archivo de configuración OpenVPN
        # Toma el contenido del secret y lo guarda en un archivo temporal
        run: echo "${{ secrets.OPENVPN_CONFIG }}" > /tmp/vpn-config.ovpn
        
      - name: Conexión a la VPN
        # Usa una acción pre-hecha para gestionar la conexión a la VPN
        uses: kota65535/github-openvpn-connect-action@v3.1.0
        with:
          config_file: /tmp/vpn-config.ovpn
          username: ${{ secrets.OPENVPN_USERNAME }}
          password: ${{ secrets.OPENVPN_PASSWORD }}
          
      - name: Eliminar archivo de configuración OpenVPN
        # Por seguridad, borra el archivo de configuración después de usarlo, incluso si falla un paso
        if: always()
        run: rm -f /tmp/vpn-config.ovpn
          
      - name: Conexión SSH y Despliegue (Lógica para un solo Repositorio)
        timeout-minutes: 5 # Aumentamos un poco el tiempo por si las instalaciones tardan
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_PORT: ${{ secrets.SSH_PORT }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          PROJECT_PATH: ${{ secrets.PROJECT_PATH }}
          GIT_PAT_TOKEN: ${{ secrets.GIT_PAT_TOKEN }}
          # Usamos la variable de GitHub para obtener el nombre del repo automáticamente
          GITHUB_REPO: ${{ github.repository }}
        run: |
          sshpass -p "$SSH_PASSWORD" ssh \
            -o StrictHostKeyChecking=no \
            -p $SSH_PORT $SSH_USER@$SSH_HOST << EOF
          
          # Si un comando falla, el script se detendrá
          set -euo pipefail
          
          echo "Navegando al directorio del proyecto: $PROJECT_PATH"
          cd "$PROJECT_PATH"
          
          echo "Actualizando el repositorio completo desde GitHub..."
          # Hacemos UN SOLO git pull para actualizar todo (backend y frontend)
          # Esta forma es más segura porque el token no queda en el historial de comandos del servidor
          git remote set-url origin https://$GIT_PAT_TOKEN@github.com/$GITHUB_REPO.git
          git pull origin main
          
          # --- Procesamiento del Backend ---
          echo "Procesando backend..."
          cd backend
          npm install
          echo "Reiniciando servicio pm2 del backend..."
          # Asegúrate de que tu proceso en pm2 se llama 'backend'
          pm2 restart backend
          
          # --- Procesamiento del Frontend ---
          echo "Procesando frontend..."
          cd ../frontend # Regresamos a la raíz y entramos a frontend
          npm install
          npm run build
          echo "Reiniciando servicio pm2 del frontend..."
          # Asegúrate de que tu proceso en pm2 se llama 'frontend'
          pm2 restart frontend
          
          echo "¡Despliegue completado exitosamente!"
          
          EOF